#!/usr/local/bin/wish8.6

#/*
#
#Copyright (c) 2020 Piotr Trzpil  p.trzpil@protonmail.com
#
#Permission to use, copy, modify, and distribute 
#this software for any purpose with or without fee
#is hereby granted, provided that the above copyright
#notice and this permission notice appear in all copies.
#
#THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR
#DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
#INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
#AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
#FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
#DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
#OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
#CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
#OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
#OF THIS SOFTWARE.
#
#*/

# made for God glory

#####################
#
#  STARTUP WINDOW
#
######################

wm minsize . 600 400
wm title . "TokPol"

namespace eval proto {

  variable helo  [binary format B8 00000000 ]
  variable login [binary format B8 00000001 ]
  variable msg   [binary format B8 00000010 ]
  variable ok    [binary format B8 00000011 ]
  variable bye   [binary format B8 00000100 ]
  variable ping  [binary format B8 00000101 ]

}

set def_initf_name "tokpol.init"
variable  cli_sock
variable serv_str

set ip_str ""
set port_str ""
set login_str ""
set password_str ""

set program_state 0
set log_state 0 

if { ! [ catch { set initf [ open $def_initf_name r ] } ] } {

  while { true }  {

   if { [ gets $initf ip_str ] < 0 }  break
   if { [ gets $initf port_str ] < 0 }  break
   if { [ gets $initf login_str ] < 0 }  break
   break

 }  

 close $initf

} 

#exit button
button .exitbut -text "X" \
       -background red \
       -command exit_program
pack   .exitbut -anchor n \
       -side right

# server data
label .iplab -text "Server IP: "
entry .ipent -width 20 \
      -textvariable ::ip_str
label .portlab -text "Server Port: "
entry .portent -width 10 \
      -textvariable ::port_str
pack .iplab .ipent \
     .portlab .portent \
     -side top

# user data
label .loginlab -text "Login: "
entry .loginent -width 30 \
      -textvariable ::login_str
label .passlab -text "Password: "
entry .passent -width 30 -show  "?" \
      -textvariable ::password_str
pack .loginlab .loginent \
     .passlab .passent \
     -side top

#connect button
button .connectbut -text "Connect" \
       -background yellow \
       -command connect_serv
pack .connectbut  -side top

label .connectlab -foreground red \
      -font bold
pack .connectlab -side top


proc mainloop {  } {
 
  while { $::log_state }  {

    set proto_byte [ recv_byte err_conn ]
    if { $proto_byte == "" }  { break }
    if { $proto_byte == $proto::ping }  {

      send $proto::ping err_conn
      continue
      
    } elseif { $proto_byte == $proto::bye }  {

      err_conn "Server closed connection"
      break;

    } elseif { $proto_byte == $proto::msg }  {

      set message [ recv_msg err_conn ]
      if { $message != "" }  {

        .textbox configure -state normal
        .textbox insert end $message
        .textbox see end
        .textbox configure -state disabled
        update
        continue

      }

    }  else {

      err_conn "Server sending garbage";
      break;

    }

    break;

  }

  after 1000 [ list after idle [ namespace code \
  [ info level 0 ] ] ]

}

after 0 mainloop


#######################
#
# Start functions
#
#######################

proc exit_program { } { 

  if { [ info exists ::cli_sock ] }  {

    catch { puts -nonewline $::cli_sock $proto::bye }
    catch { close $::cli_sock }

  }

  exit

}

proc connect_serv { }  {

  if { [ info exists ::cli_sock ] }  {

    catch { close $::cli_sock }
    catch { unset ::cli_sock }

  }

  .connectbut configure -state disabled
  .connectlab configure -text ""
  update
  
  file delete $::def_initf_name
  set initf [ open $::def_initf_name w ]
  puts $initf $::ip_str
  puts $initf $::port_str
  puts $initf $::login_str
  close $initf


  if { [ catch { set ::cli_sock \
    [ socket -async $::ip_str $::port_str ] } estr ] } {

    .connectlab configure -text $estr
    .connectbut configure -state normal
    return

  }
  
  set count 0
  while { true }  {
    
    set count [ expr $count + 1 ]

    after 100 
    .connectbut configure -text "."
    update
    after 100 
    .connectbut configure -text ".."
    update
    after 100 
    .connectbut configure -text "..."
    update
    after 100 
    .connectbut configure -text ".."
    update
    after 100 
    .connectbut configure -text "."
    update

    if { ![ chan configure $::cli_sock \
             -connecting ] } {

      catch { chan configure \
            $::cli_sock -error  } errstr

      if { [ string length $errstr ] != 0 }  {

        err_conn $errstr
        return

      }
   
      break
       
    }

    if { $count > 30 }  {

      err_conn "Connection timed out"
      return

    } 
    
  } 

  .connectbut configure -text "Connected" \
              -disabledforeground  "black" \
              -background "light green"
  update

  fconfigure $::cli_sock -translation binary -blocking 0
  
  if { [ send $proto::helo err_conn ] }  {  return  }

  set serv_ans [ recv 1 err_conn ]
  if { $serv_ans == $proto::helo }  {

    .connectbut configure -text "Server responding" \

  }  else  {

    err_conn "Server sending garbage"
    return

  }

  update
  if { [ send_prtmsg $proto::login $::login_str \
      err_conn ] }  { return }
  if { [ send_msg $::password_str err_conn ] } \
      { return }

  set serv_ans [ recv 1 err_conn ]
  if { $serv_ans == $proto::ok }  {

    .connectbut configure -text \
      "Loged as $::login_str"

  }  elseif {  $serv_ans == $proto::bye  }  {

    err_conn "Wrong login or password"
    return

  }  else  {

    err_conn "Server sending garbage" 

  }

  if { ! $::program_state }  {
   
    set ::program_state 1
    
    after 25
    destroy .iplab
    update    
 
    after 25
    destroy .ipent
    update    

    after 25
    destroy .portlab
    update    

    after 25
    destroy .portent
    update    

    after 25
    destroy .loginlab
    update    

    after 25
    destroy .loginent
    update    

    after 25
    destroy .passlab
    update    

    after 25
    destroy .passent
    update    

    after 25
    text .textbox -width 75 -height 15 \
        -wrap word -state disabled \
        -background "grey15" -foreground "white"
    pack .textbox -side top -fill both -expand 1
    update

    after 25
    text .userbox -width 75 -height 3 \
        -background "grey15" -foreground "white"
    pack .userbox -side top -fill both

    # action on enter!
    bind .userbox <Return> { 
 
      set user_message [ .userbox get 1.0 end ]
      if { ! [ send_prtmsg $proto::msg $user_message \
        err_conn ] }  {

        .userbox delete 1.0 end
        update

      }

    }

  }

  # clear textbox
  .textbox delete 1.0 end
  set ::log_state 1 

}

proc send_msg { msg efun }  {

  set bin_data [ encoding convertto utf-8 \
    $msg ]  

  set data_size [  string length $bin_data ]

  set data_size_bin [ binary format i $data_size ]

  if { [ send $data_size_bin $efun ] } { return -1 }  

  if { [ send $bin_data $efun ] }  { return -1 }

  return 0

}


proc send_prtmsg { proto msg efun }  {

  if { [ send $proto $efun ] } { return -1 }  

  if { [ send_msg $msg $efun ] }  { return -1 }

  return 0

}

proc send { data efun }  {

  if { [ catch { puts -nonewline  \
        $::cli_sock $data } e_ret ] }  {

    $efun $e_ret
    return -1

  }

  if { [ catch { flush $::cli_sock } e_ret ] }  {
  
    $efun $e_ret
    return -1

  }

  return 0

}

proc recv { data_size efun }  {

  set count_time 0
  set wait_time 50
 
  set full_str ""
 
  while { $count_time < 5000 }  {

    set count_time [ expr $count_time + $wait_time ]
    
    if { [ catch { set data \
        [ read $::cli_sock $data_size ] } \
        e_ret ] }  {

      $efun $e_ret
      return ""

    }

    if { [ string length $data ] }  {

      set count_time 0
      append full_str $data
      set data_size  \
        [ expr $data_size  - \
        [ string length $data ] ]
     
      if { $data_size == 0 }  { return $full_str }

    }

    after $wait_time

  }
  
  $efun "Server answer timed out"
  return ""

}


proc recv_msg { efun }  {

  set msg_size_bin [ recv 4 efun ]
  if { $msg_size_bin == "" }  { return }
  binary scan $msg_size_bin i msg_size
  
  set message [ recv $msg_size efun ]
  set encoded_msg [encoding convertfrom utf-8 $message]
  if { $message == "" }  { return }
  return $encoded_msg

}


proc recv_byte { efun }  {

  if { [ catch { set ourbyte \
      [ read $::cli_sock 1 ] } e_ret ] }  {

    $efun $e_ret
    return ""

  }

  return $ourbyte

}

proc err_conn { e_info } {

    set ::log_state 0 
    catch { close $::cli_sock }
    catch { unset ::cli_sock }
    .connectlab  configure -text $e_info
    .connectbut  configure -background yellow
    .connectbut configure -state normal
    .connectbut configure -text "Connect"

} 
